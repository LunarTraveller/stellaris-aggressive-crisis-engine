namespace = acemod_fleet
# 
# Instructions:
# 
# set_global_flag = acemod_activated								global			Activates ACEMOD fleet AI.
# set_country_flag = acemod_assisted_ai								country			Only countries with this flag will have their fleets piloted by ACEMOD.
# acemod_set_fleet_piloted_exclusion_on = yes						fleet ship		Prevents ACEMOD from piloting marked fleets.
# acemod_set_fleet_piloted_exclusion_off = yes						fleet ship		Resumes default operation.
# set_country_flag = acemod_country_flag_custom_starbase_outpost	country			ACEMOD AI constructors will spawn normal starbases (outpost) using empire's graphical culture.
# set_country_flag = acemod_country_flag_custom_starbase_citadel	country			ACEMOD AI constructors will spawn normal starbases (citadel) using empire's graphical culture.
# set_country_flag = acemod_country_flag_disabled_military_ai		country			Disables ACEMOD AI for military fleets.
# set_country_flag = acemod_country_flag_disabled_constructor_ai	country			Disables ACEMOD AI for constructor fleets.
#		
# Calculates strategic value of systems.
country_event = {
	id = acemod_fleet.2
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_system_within_border = {
			limit = {
				exists = owner
			}
			acemod_calculate_solar_system_target_value = yes
		}
	}
}

# Recalculates strategic value of systems.
# country_event = {
# 	id = acemod_fleet.3
# 	hide_window = yes
# 	is_triggered_only = yes
# 	immediate = {
# 		every_system_within_border = {
# 			limit = {
# 				exists = owner
# 			}
# 			acemod_recalculate_solar_system_target_value = yes
# 		}
# 	}
# }
# Orders idle crisis fleets to seek target systems and move to them.
event = {
	id = acemod_fleet.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = acemod_activated
	}
	immediate = {
		every_country = {
			limit = {
				has_country_flag = acemod_assisted_ai				# Only countries with this flag will have their fleets piloted by ACEMOD.
				NOT = {
					has_country_flag = acemod_country_flag_disabled_military_ai
				}
				# OR = {
				# 	is_country_type = swarm
				# 	is_country_type = extradimensional
				# 	is_country_type = extradimensional_2
				# 	is_country_type = extradimensional_3
				# 	is_country_type = ai_empire
				# 	is_country_type = gray
				# 	is_country_type = gray_goo					# A Deadly Tempest mod.
				# }
			}
			every_owned_fleet = {
				limit = {
					NOT = {
						check_variable = {
							which = acemod_var_fleet_piloted_exclusion
							value = 1
						}
					}
					is_fleet_idle = yes
					is_ship_class = shipclass_military
				}
				fleet_event = {
					id = acemod_fleet.5
					# id = acemod_fleet.100
				}
			}
		}
	}
}

# Seeks valid target to bombard, skips if not found.
fleet_event = {
	id = acemod_fleet.5
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				solar_system = {
					exists = owner
					any_system_planet = {
						has_orbital_bombardment = yes
						any_fleet_in_orbit = {
							is_same_value = root
						}
					}
				}
			}
			break = yes
		}
		if = {
			limit = {
				solar_system = {
					exists = owner
					any_system_planet = {
						OR = {
							is_colony = yes
							is_under_colonization = yes
						}
						NOR = {
							has_planet_flag = acemod_planet_flag_bombardment_target
							has_orbital_bombardment = yes
						}
						NOT = {
							is_owned_by = prevprevprev
						}
					}
				}
			}
			queue_actions = {
				find_closest_planet = {
					trigger = {
						id = "acemod.5.t1"
						OR = {
							is_colony = yes
							is_under_colonization = yes
						}
						NOT = {
							has_planet_flag = acemod_planet_flag_bombardment_target
						}
						NOT = {
							is_owned_by = prevprevprev
						}
						# is_same_value = event_target:acemod_event_target_invader_bombardment_target
					}
					found_planet = {
						effect = {
							id = "acemod.5.e1"
							save_event_target_as = acemod_event_target_invader_bombardment_target
							set_timed_planet_flag = {
								flag = acemod_planet_flag_bombardment_target
								days = 120
							}
						}
						move_to = this
						wait = 5
						orbit_planet = this
					}
					failed = {
						effect = {
							id = "acemod.5.e2"
							root = {
								fleet_event = {
									id = acemod_fleet.6
									# id = acemod_fleet.100
								}
							}
						}
					}
				}
			}
		}
		else = {
			fleet_event = {
				id = acemod_fleet.6
				# id = acemod_fleet.100
			}
		}
	}
}

# Finds connected and accessible bypass system.
fleet_event = {
	id = acemod_fleet.6
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				solar_system = {
					OR = {
						has_natural_wormhole = yes
						any_system_megastructure = {
							is_megastructure_type = gateway_final
							is_megastructure_type = gateway_restored
							is_megastructure_type = lgate_base
						}
					}
				}
			}
			random_list = {
				50 = {
					queue_actions = {
						find_random_system = {
							trigger = {
								id = "acemod.6.t1"
								distance = {
									source = root
									#	max_distance <= 1000
									#	min_distance >= 1
									type = hyperlane
									#	uses_bypass = yes
									bypass_empire = root.owner
									min_jumps = 1
									max_jumps = 1
								}
								OR = {
									has_natural_wormhole = yes
									any_system_megastructure = {
										is_megastructure_type = gateway_final
										is_megastructure_type = gateway_restored
										is_megastructure_type = lgate_base
									}
								}
								has_access_fleet = root.owner
								NOT = {
									any_fleet_in_system = {
										is_same_value = root
									}
								}
								owner = {
									NOT = {
										is_country_type = fallen_empire
									}
								}
							}
							found_system = {
								move_to = this
							}
							failed = {
								effect = {
									id = "acemod.6.e1"
									root = {
										fleet_event = {
											id = acemod_fleet.100
										}
									}
								}
							}
						}
					}
				}
				50 = {
					fleet_event = {
						id = acemod_fleet.100
					}
				}
			}
		}
		else = {
			fleet_event = {
				id = acemod_fleet.100
			}
		}
	}
}

# Activates ACEMOD AI. Without this flag fleets won't seek targets.
event = {
	id = acemod_fleet.10
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_global_flag = acemod_activated
	}
}

# Applies ACEMOD AI to a specific country. Without this flag fleets won't seek targets.
country_event = {
	id = acemod_fleet.11
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_country_flag = acemod_assisted_ai
	}
}

# ACEMOD AI constructors will spawn normal starbases (outpost) using empire's graphical culture.
country_event = {
	id = acemod_fleet.12
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_country_flag = acemod_country_flag_custom_starbase_outpost
	}
}

# ACEMOD AI constructors will spawn normal starbases (citadel) using empire's graphical culture.
country_event = {
	id = acemod_fleet.13
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_country_flag = acemod_country_flag_custom_starbase_citadel
	}
}

# Disables ACEMOD AI for military fleets.
country_event = {
	id = acemod_fleet.20
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_country_flag = acemod_country_flag_disabled_military_ai
	}
}

# Disables ACEMOD AI for constructor fleets.
country_event = {
	id = acemod_fleet.21
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_country_flag = acemod_country_flag_disabled_constructor_ai
	}
}

# Main fleet hunter-seeker event.
fleet_event = {
	id = acemod_fleet.100
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		solar_system = {
			closest_system = {
				min_steps = 1
				max_steps = 20
				limit = {
					has_access_fleet = root.owner
					NOR = {
						has_star_flag = acemod_star_flag_solar_system_target
						has_star_flag = extradimensional_origin_system
					}
					# OR = {
					# 	AND = {
					exists = owner
					owner = {
						NOR = {
							is_same_value = root.owner
							is_country_type = fallen_empire
						}
					}
					# }
					# probably too resource intensive, can use global, annual evaluation instead
					# any_system_planet = {
					# 	exists = owner
					# 	owner = {
					# 		NOR = {
					# 			is_same_value = root.owner
					# 			is_country_type = fallen_empire
					# 		}
					# 	}
					# }
					# needs review
					# any_fleet_in_system = {
					# 	owner = {
					# 		is_hostile_to = root.owner
					# 		NOT = {
					# 			is_country_type = fallen_empire
					# 		}
					# 	}
					# }
					# }
				}
				save_event_target_as = acemod_event_target_invader_target
				set_timed_star_flag = {
					flag = acemod_star_flag_solar_system_target
					days = 120
				}
			}
		}
		save_event_target_as = acemod_event_target_invader_fleet
		set_fleet_stance = aggressive
		set_fleet_bombardment_stance = indiscriminate		# Vanilla has selective on default
		set_aggro_range_measure_from = self
		set_aggro_range = 800		# Longer aggro range, same as for pirate systems (default 500)
		queue_actions = {
			find_closest_system = {
				trigger = {
					id = "acemod.100.t1"
					is_same_value = event_target:acemod_event_target_invader_target
				}
				found_system = {
					move_to = this
					# effect = {
					# 	id = acemod.100.e1
					# 	root = {
					# 		fleet_event = {
					# 			id = acemod_fleet.101
					# 			days = 5
					# 		}
					# 	}
					# }
				}
				# Maybe increase seek range on failed.
				# failed = {
				# 	effect = {
				# 		id = acemod.100.e2
				# 		root = {
				# 			fleet_event = {
				# 				id = acemod_fleet.101
				# 				days = 5
				# 			}
				# 		}
				# 	}
				# }
			}
		}
	}
}

# Checks if the fleet is idle and applies a timed fleet_flag.
# Doesn't work as expected.
fleet_event = {
	id = acemod_fleet.101
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				is_fleet_idle = no
			}
			set_timed_fleet_flag = {
				flag = acemod_event_target_invader_fleet_active
				days = 85
			}
		}
		else = {
			set_timed_fleet_flag = {
				flag = acemod_event_target_invader_fleet_idle
				days = 85
			}
		}
	}
}

# Destroys all colonies when crisis fleet enters the system. This is a debug event and should be disabled in the release version.
# fleet_event = {
# 	id = acemod_fleet.110
# 	hide_window = yes
# 	is_triggered_only = yes
# 	trigger = {
# 		has_global_flag = acemod_activated
# 		owner = {
# 			OR = {
# 				is_country_type = swarm
# 				is_country_type = extradimensional
# 				is_country_type = extradimensional_2
# 				is_country_type = extradimensional_3
# 				is_country_type = ai_empire
# 				is_country_type = gray
# 				is_country_type = gray_goo				# A Deadly Tempest mod
# 			}
# 		}
# 		is_ship_class = shipclass_military
# 	}
# 	immediate = {
# 		# fleet_event = {
# 		# 	id = acemod_fleet.101
# 		# 	days = 75
# 		# }
# 		solar_system = {
# 			# for testing purposes
# 			every_system_planet = {
# 				limit = {
# 					is_colony = yes
# 				}
# 				destroy_colony = yes
# 			}
# 		}
# 	}
# }
# Main starbase constructor event.
event = {
	id = acemod_fleet.300
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = acemod_activated
	}
	immediate = {
		every_country = {
			limit = {
				has_country_flag = acemod_assisted_ai				# Only countries with this flag will have their fleets piloted by ACEMOD.
				NOT = {
					has_country_flag = acemod_country_flag_disabled_constructor_ai
				}
				# OR = {
				# 	is_country_type = swarm
				# 	is_country_type = extradimensional
				# 	is_country_type = extradimensional_2
				# 	is_country_type = extradimensional_3
				# 	is_country_type = ai_empire
				# 	is_country_type = gray
				# 	is_country_type = gray_goo					# A Deadly Tempest mod.
				# }
			}
			every_owned_fleet = {
				limit = {
					NOT = {
						check_variable = {
							which = acemod_var_fleet_piloted_exclusion
							value = 1
						}
					}
					is_fleet_idle = yes
					is_ship_class = shipclass_constructor
				}
				fleet_event = {
					id = acemod_fleet.305
				}
			}
		}
	}
}

# Checks if starbase (owner) is present or under construction and orders building it if not.
fleet_event = {
	id = acemod_fleet.305
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				has_fleet_flag = acemod_planet_flag_starbase_construction_fleet
			}
			break = yes
		}
		else_if = {
			limit = {
				solar_system = {
					NOR = {
						exists = owner
						has_star_flag = acemod_star_flag_starbase_construction_system
					}
					NOT = {
						# any_ship_in_system = {
						any_fleet_in_system = {
							OR = {
								is_constructing = starbase
								has_fleet_flag = acemod_planet_flag_starbase_construction_fleet
							}
							owner = {
								is_same_value = root.owner
							}
						}
					}
				}
			}
			queue_actions = {
				find_closest_planet = {
					trigger = {
						id = "acemod.305.t1"
						is_primary_star = yes
					}
					found_planet = {
						move_to = this
						wait = 5
						orbit_planet = this
						effect = {
							id = "acemod.305.e1"
							solar_system = {
								set_timed_star_flag = {
									flag = acemod_star_flag_starbase_construction_system
									days = 100
								}
							}
							root = {
								set_timed_fleet_flag = {
									flag = acemod_planet_flag_starbase_construction_fleet
									days = 100
								}
								fleet_event = {
									id = acemod_fleet.306
									days = 100
								}
							}
						}
					}
					failed = {
						effect = {
							id = "acemod.305.e2"
							root = {
								fleet_event = {
									id = acemod_fleet.310
								}
							}
						}
					}
				}
			}
		}
		else = {
			fleet_event = {
				id = acemod_fleet.310
			}
		}
	}
}

# Builds starbase. Apply one of custom_starbase country flags if you are using custom country type or empire.
fleet_event = {
	id = acemod_fleet.306
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# Vanilla empire types are listed below.
		if = {
			limit = {
				is_in_combat = no
				owner = {
					NOR = {
						has_country_flag = acemod_country_flag_custom_starbase_outpost
						has_country_flag = acemod_country_flag_custom_starbase_citadel
					}
				}
			}
			# Including default and rebel for future-proofing.
			if = {
				limit = {
					owner = {
						OR = {
							is_country_type = default
							is_country_type = rebel
						}
					}
				}
				solar_system = {
					create_starbase = {
						size = starbase_outpost
						owner = root.owner
					}
				}
				break = yes
			}
			if = {
				limit = {
					owner = {
						is_country_type = ai_empire
					}
				}
				solar_system = {
					create_starbase = {
						size = starbase_ai
						owner = root.owner
					}
				}
				break = yes
			}
			if = {
				limit = {
					owner = {
						OR = {
							is_country_type = extradimensional
							is_country_type = extradimensional_2
							is_country_type = extradimensional_3
						}
					}
				}
				random_list = {
					50 = {
						solar_system = {
							create_starbase = {
								size = starbase_exd_0
								owner = root.owner
							}
						}
					}
					50 = {
						solar_system = {
							create_starbase = {
								size = starbase_exd
								owner = root.owner
							}
							# Make sure anchors are accounted for and effect invincibility of portal for each Unbidden faction.
							random_fleet_in_system = {
								limit = {
									is_ship_size = starbase_exd
								}
								random_owned_ship = {
									limit = {
										is_ship_size = starbase_exd
									}
									ship_event = {
										id = crisis.1280
									}
								}
							}
						}
					}
				}
				break = yes
			}
			if = {
				limit = {
					owner = {
						is_country_type = swarm
					}
				}
				solar_system = {
					create_starbase = {
						size = starbase_swarm
						owner = root.owner
					}
				}
				break = yes
			}
			if = {
				limit = {
					owner = {
						OR = {
							is_country_type = awakened_marauders
							is_country_type = dormant_marauders
							is_country_type = pirate
							is_country_type = ruined_marauders
						}
					}
				}
				solar_system = {
					create_starbase = {
						size = starbase_marauder
						owner = root.owner
					}
				}
				break = yes
			}
			if = {
				limit = {
					owner = {
						OR = {
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						}
					}
				}
				solar_system = {
					create_starbase = {
						size = starbase_fe_outpost
						owner = root.owner
					}
				}
				break = yes
			}
			if = {
				limit = {
					owner = {
						OR = {
							is_country_type = gate_builders
							is_country_type = gray
							is_country_type = gray_goo
						}
					}
				}
				solar_system = {
					create_starbase = {
						size = starbase_gatebuilders
						owner = root.owner
					}
				}
				break = yes
			}
			else = {
				break = yes
			}
		}
		# Below for non-vanilla use. Apply one of custom_starbase country flags if you are using custom country type or empire.
		else_if = {
			limit = {
				is_in_combat = no
				owner = {
					OR = {
						has_country_flag = acemod_country_flag_custom_starbase_outpost
						has_country_flag = acemod_country_flag_custom_starbase_citadel
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_country_flag = acemod_country_flag_custom_starbase_outpost
						NOT = {
							has_country_flag = acemod_country_flag_custom_starbase_citadel
						}
					}
				}
				solar_system = {
					create_starbase = {
						size = starbase_outpost
						owner = root.owner
					}
				}
				break = yes
			}
			if = {
				limit = {
					owner = {
						has_country_flag = acemod_country_flag_custom_starbase_citadel
						NOT = {
							has_country_flag = acemod_country_flag_custom_starbase_outpost
						}
					}
				}
				solar_system = {
					create_starbase = {
						size = starbase_citadel
						owner = root.owner
					}
				}
				break = yes
			}
			else = {
				break = yes
			}
		}
		else = {
			break = yes
		}
	}
}

# Seeks valid solar system to build starbase in.
fleet_event = {
	id = acemod_fleet.310
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		solar_system = {
			closest_system = {
				min_steps = 1
				max_steps = 20
				limit = {
					has_access_fleet = root.owner
					NOR = {
						has_star_flag = acemod_star_flag_solar_system_constructor_target
						has_star_flag = acemod_star_flag_starbase_construction_system
						has_star_flag = extradimensional_origin_system
					}
					NOT = {
						exists = owner
					}
					NOR = {
						# any_ship_in_system = {
						any_fleet_in_system = {
							OR = {
								is_constructing = starbase
								has_fleet_flag = acemod_planet_flag_starbase_construction_fleet
							}
							owner = {
								is_same_value = root.owner
							}
						}
						any_fleet_in_system = {
							owner = {
								is_hostile = root.owner
							}
						}
					}
				}
				save_event_target_as = acemod_star_flag_solar_system_constructor_target
				set_timed_star_flag = {
					flag = acemod_star_flag_solar_system_constructor_target
					days = 120
				}
			}
		}
		save_event_target_as = acemod_event_target_constructor_fleet
		set_fleet_stance = evasive
		queue_actions = {
			find_closest_system = {
				trigger = {
					id = "acemod.310.t1"
					is_same_value = event_target:acemod_star_flag_solar_system_constructor_target
				}
				found_system = {
					move_to = this
					# effect = {
					# 	id = acemod.310.e1
					# 	root = {
					# 		fleet_event = {
					# 			id = acemod_fleet.101
					# 			days = 5
					# 		}
					# 	}
					# }
				}
				# failed = {
				# 	effect = {
				# 		id = acemod.310.e2
				# 		root = {
				# 			fleet_event = {
				# 				id = acemod_fleet.101
				# 				days = 5
				# 			}
				# 		}
				# 	}
				# }
			}
		}
	}
}
